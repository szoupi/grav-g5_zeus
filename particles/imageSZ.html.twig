{% extends '@nucleus/partials/particle.html.twig' %}

{% block particle %}
    {% set url = url(particle.url)|default(gantry.siteUrl()) %}
    {% set image = url(particle.image) %}
    
    {% if particle.link == true %}
        <a href="{{ url }}" target="{{ particle.target|default('_self') }}" 
                    title="{{ particle.text }}" {{ rel|default('')|raw }} >
    {% else %}
        <div>
    {% endif %}
        {% if particle.svg is not empty %}
            {{ particle.svg|raw }}
        {% elseif image %}
            <img 
                src="{{ url('gantry-theme://images/default.jpg') }}"
                data-src="{{ url(particle.image) }}" 
                class="sz-lazy"
                alt="{{ particle.text }}" 
                style="
                    {# padding #}
                    {% if particle.paddingTop %} padding-top: {{ particle.paddingTop }}; {% endif %}
                    {% if particle.paddingBottom %} padding-bottom: {{ particle.paddingBottom }}; {% endif %}
                    {% if particle.paddingLeft %} padding-left: {{ particle.paddingLeft }}; {% endif %}
                    {% if particle.paddingRight %} padding-right: {{ particle.paddingRight }}; {% endif %}
                    {# margin #}
                    {% if particle.marginTop %} margin-top: {{ particle.marginTop }}; {% endif %}
                    {% if particle.marginBottom %} margin-bottom: {{ particle.marginBottom }}; {% endif %}
                    {% if particle.marginLeft %} margin-left: {{ particle.marginLeft }}; {% endif %}
                    {% if particle.marginRight %} margin-right: {{ particle.marginRight }}; {% endif %}

                "
            />
        {% else %}
            {{ particle.text|default('') }}
        {% endif %}
    {% if particle.link == true %}
        </a>
    {% else %}
        </div>
    {% endif %}

    <script>
        lazyLoadImages()
        function lazyLoadImages() {
            console.log('starting lazy load');

            // arrays are iterable, so forEach can be used, but not Objects
            var lazyImages = [].slice.call(document.querySelectorAll('img[data-src].sz-lazy'));

            if ('IntersectionObserver' in window) {
                console.log('IntersectionObserver activated for lazy images');

                let lazyImageObserver = new IntersectionObserver(function (entries, observer) {
                    entries.forEach(function (entry) {
                        if (entry.isIntersecting) {
                            let lazyImage = entry.target;
                            lazyImage.src = lazyImage.dataset.src;
                            console.log('IntersectionObserver changed src of lazy img: ' + lazyImage.dataset.src);

                            lazyImage.classList.remove('sz-lazy');
                            lazyImageObserver.unobserve(lazyImage);
                        }
                    });
                });

                lazyImages.forEach(function (lazyImage) {
                    lazyImageObserver.observe(lazyImage);
                });
            } else {
                // Possibly fall back to a more compatible method here
                console.log('lazy load for images did not succeed');
                var images = document.getElementsByTagName('img');
                for(var i = 0; i < images.length ; i++) {
                    images[i].src = images[i].dataset.src;
                    console.log(' images src fell back to original: ' + images[i].dataset.src);
                };
                


            }
        }

    </script>


{% endblock %}
